generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  output = "../data-sync/node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ClientView {
  phoneNumber        String    @id
  name               String?
  userName           String?
  labels             String?
  chatId             String?   @unique
  lastActivity       DateTime  @updatedAt
  threadId           String?
  threadTokenCount   Int?      @default(0)
  profileStatus      String?
  proximaAccion      String?
  fechaProximaAccion DateTime?
  prioridad          Int?
}

model hotel_apartments {
  id          Int    @id @default(autoincrement())
  propertyId  Int    @map("property_id")
  roomId      Int    @unique @map("room_id")
  roomName    String @map("room_name")
  extraCharge Json   @default("{\"amount\": 70000, \"description\": \"Cargo adicional:\"}") @map("extra_charge")
  capacity    Int    @default(4)
}

model Booking {
  id            Int      @id @default(autoincrement())
  bookingId     String   @unique
  phone         String?
  guestName     String?
  status        String?
  internalNotes String?
  propertyName  String?
  arrivalDate   String?
  departureDate String?
  numNights     Int?
  totalPersons  Int?
  totalCharges  String?
  totalPayments String?
  balance       String?
  basePrice     String?
  channel       String?
  email         String?
  apiReference  String?
  charges       Json     @default("[]")
  payments      Json     @default("[]")
  messages      Json     @default("[]")
  infoItems     Json     @default("[]")
  notes         String?
  bookingDate   String?
  modifiedDate  String?
  lastUpdatedBD DateTime @default(now())
  raw           Json?
  BDStatus      String?
  Leads         Leads?

  @@index([arrivalDate])
  @@index([bookingId])
  @@index([channel])
  @@index([departureDate])
  @@index([guestName])
  @@index([modifiedDate])
  @@index([phone])
  @@index([propertyName, departureDate])
  @@index([status])
  @@index([BDStatus])
  @@index([BDStatus], map: "idx_Booking_BDStatus")
}

model Leads {
  id            Int      @id @default(autoincrement())
  bookingId     String?  @unique
  phone         String
  guestName     String?
  propertyName  String?
  arrivalDate   String
  departureDate String?
  totalPersons  Int?
  source        String
  channel       String?
  priority      String   @default("media")
  notes         String?
  createdAt     DateTime @default(now())
  lastUpdatedLeads DateTime @default(now())
  numNights     Int?
  leadNotes     String?
  Booking       Booking? @relation(fields: [bookingId], references: [bookingId], onDelete: Cascade, onUpdate: NoAction, map: "Leads_booking_fk")

  @@index([arrivalDate])
  @@index([phone])
  @@index([priority])
  @@index([source])
  @@index([arrivalDate], map: "idx_Leads_arrivalDate")
  @@index([phone], map: "idx_Leads_phone")
}
