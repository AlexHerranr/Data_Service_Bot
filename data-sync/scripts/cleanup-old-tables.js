/**
 * Script para eliminar tablas viejas y backups
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function cleanupOldTables() {
    console.log('üßπ LIMPIEZA DE TABLAS VIEJAS');
    console.log('=' .repeat(60));
    
    try {
        // 1. Verificar qu√© tablas existen
        console.log('\nüìã Buscando tablas para eliminar...');
        
        const tables = await prisma.$queryRaw`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND (
                table_name = 'IA_CMR_Clientes'
                OR table_name LIKE '%backup%'
                OR table_name LIKE '%_old'
                OR table_name LIKE '%_backup'
            )
            ORDER BY table_name
        `;
        
        if (tables.length > 0) {
            console.log('\nüì¶ Tablas encontradas para eliminar:');
            console.table(tables);
            
            // 2. Eliminar cada tabla
            for (const table of tables) {
                const tableName = table.table_name;
                console.log(`\nüóëÔ∏è Eliminando tabla: ${tableName}...`);
                
                try {
                    await prisma.$executeRawUnsafe(`DROP TABLE IF EXISTS "${tableName}" CASCADE`);
                    console.log(`‚úÖ Tabla ${tableName} eliminada`);
                } catch (error) {
                    console.log(`‚ö†Ô∏è Error eliminando ${tableName}: ${error.message}`);
                }
            }
        } else {
            console.log('‚úÖ No se encontraron tablas viejas o backups');
        }
        
        // 3. Eliminar espec√≠ficamente las tablas mencionadas
        console.log('\nüóëÔ∏è Eliminando tablas espec√≠ficas...');
        
        const specificTables = [
            'IA_CMR_Clientes',  // Tabla vieja con gui√≥n bajo
            'Leads_old',        // Backup de Leads
            'Leads_backup'      // Otro posible backup
        ];
        
        for (const tableName of specificTables) {
            try {
                const result = await prisma.$executeRawUnsafe(`DROP TABLE IF EXISTS "${tableName}" CASCADE`);
                console.log(`‚úÖ Verificado: ${tableName}`);
            } catch (error) {
                console.log(`‚ö†Ô∏è ${tableName}: ${error.message}`);
            }
        }
        
        // 4. Verificar tablas actuales
        console.log('\nüìä TABLAS ACTUALES EN LA BASE DE DATOS:');
        
        const currentTables = await prisma.$queryRaw`
            SELECT 
                table_name as "Tabla",
                CASE 
                    WHEN table_name IN ('Booking', 'Leads', 'ClientView', 'IA_CRM_Clientes', 'hotel_apartments') 
                    THEN '‚úÖ Activa'
                    ELSE '‚ö†Ô∏è Revisar'
                END as "Estado"
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            AND table_type = 'BASE TABLE'
            ORDER BY 
                CASE 
                    WHEN table_name IN ('Booking', 'Leads', 'ClientView', 'IA_CRM_Clientes') THEN 0
                    ELSE 1
                END,
                table_name
        `;
        
        console.table(currentTables);
        
        // 5. Resumen de espacio liberado
        console.log('\nüíæ ESPACIO EN BASE DE DATOS:');
        
        const dbSize = await prisma.$queryRaw`
            SELECT 
                pg_database.datname as "Base de Datos",
                pg_size_pretty(pg_database_size(pg_database.datname)) as "Tama√±o Total"
            FROM pg_database
            WHERE datname = current_database()
        `;
        
        console.table(dbSize);
        
        // Tama√±o de tablas principales
        const tableSizes = await prisma.$queryRaw`
            SELECT 
                tablename as "Tabla",
                pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as "Tama√±o"
            FROM pg_tables
            WHERE schemaname = 'public'
            AND tablename IN ('Booking', 'Leads', 'ClientView', 'IA_CRM_Clientes', 'hotel_apartments')
            ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC
        `;
        
        console.log('\nüìä Tama√±o de tablas principales:');
        console.table(tableSizes);
        
        console.log('\n' + '=' .repeat(60));
        console.log('üéâ ¬°LIMPIEZA COMPLETADA!');
        console.log('=' .repeat(60));
        
        console.log('\n‚úÖ Tablas actuales del sistema:');
        console.log('‚Ä¢ Booking - Reservas principales');
        console.log('‚Ä¢ Leads - Reservas pendientes de pago');
        console.log('‚Ä¢ ClientView - Clientes de WhatsApp');
        console.log('‚Ä¢ IA_CRM_Clientes - CRM unificado (nueva)');
        console.log('‚Ä¢ hotel_apartments - Configuraci√≥n de propiedades');
        
    } catch (error) {
        console.error('\n‚ùå ERROR:', error.message);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// Ejecutar
cleanupOldTables()
    .then(() => {
        console.log('\n‚úÖ Proceso completado');
        process.exit(0);
    })
    .catch((error) => {
        console.error('\n‚ùå Error:', error.message);
        process.exit(1);
    });